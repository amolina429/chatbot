version: '3.8'

services:
  # Base de datos PostgreSQL
  db:
    image: postgres:13
    container_name: postgres_db
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - app_network

  # Backend en Django
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: django_backend
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./backend:/app
    environment:
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: db
      DB_PORT: 5432
    depends_on:
      - db
    networks:
      - app_network

  # Frontend en React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: react_frontend
    command: npm start
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      NODE_ENV: development
      REACT_APP_API_URL: http://localhost:8000/api/
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - app_network

  # Servidor Nginx (Proxy Inverso)
  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - backend
      - frontend
    networks:
      - app_network

# Vol√∫menes para persistencia de datos
volumes:
  postgres_data:

# Red para conectar los servicios
networks:
  app_network:
    driver: bridge